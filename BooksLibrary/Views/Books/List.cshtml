<script src="~/Scripts/knockout.validation.js"></script>

<div id="booksList" data-bind='visible: isBooksListVisible, uniqueName: true'>
    <button id="addBook" type="button" style="margin-bottom: 20px;" data-bind='click: editBook' class="btn btn-primary">Add new book</button>
    <button class="btn btn-success" style="margin-bottom: 20px;" data-bind='click: sortByTitle'>Sort by title</button>
    <button class="btn btn-success" style="margin-bottom: 20px;" data-bind='click: sortByYear'>Sort by year</button>
    <div data-bind='simpleGrid: booksGrid'> </div>
</div>

<form id="newBook" data-bind="visible: isBookEditorVisible">
    <button id="back" class="btn btn-success" style="margin-bottom: 20px;" data-bind='click: back'>Back</button>

    <div class="form-group">
        <label style="margin-top: 20px;" for="title">Title:</label>
        <input type="text" class="form-control" id="title" data-bind='value: title' placeholder="Title">

        <div id="authorsList" class="form-inline">
            <p>
                <label style="margin-top: 20px;" for="pages">Authors:</label>
                <a href="#" id="addAuthor" class="btn btn-link" data-bind='click: addAuthor'>One more</a><br />
                <div id="authors" data-bind='foreach: authors'>
                    <input type="text" class="form-control" id="newame" data-bind='value: name, uniqueName: true' placeholder="Name"><br />
                    <input style="margin-bottom: 20px;" type="text" class="form-control" data-bind='value: surname, uniqueName: true' id="surname" placeholder="Surname" />
                    <a href="#" id="remove" data-bind="click: $root.removeAuthor">Delete</a><br />
                </div>
            </p>
        </div>

        <label style="margin-top: 20px;" for="pages">Pages:</label>
        <input type="text" class="form-control" id="pages" data-bind='value: pages' placeholder="Pages">

        <label style="margin-top: 20px;" for="publisher">Publisher (optional):</label>
        <input type="text" class="form-control" id="publisher" data-bind='value: publisher' placeholder="Publisher">

        <label style="margin-top: 20px;" for="year">Year:</label>
        <input type="text" class="form-control" id="year" data-bind='value: year' placeholder="Year">

        <label style="margin-top: 20px;" for="isbn">ISBN:</label>
        <input type="text" class="form-control" id="isbn" data-bind='value: isbn' placeholder="ISBN">

        <label style="margin-top: 20px;" for="cover">Cover (optional):</label>
        <input type="file" id="fileUpload" class="file_input_hidden" data-bind="FileUpload: name, fileObjectURL: url, fileBinaryData: cover" />
    </div>
    <button id="addNewBook" style="margin-top: 20px;" class="btn btn-danger" data-bind="visible: isAddButtonVisible, click: addBook" type="submit">Add</button>
    <button id="addNewBook" style="margin-top: 20px;" class="btn btn-danger" data-bind="visible: isEditButtonVisible, click: changeBook" type="submit">Edit</button>
</form>

<script>
    var isBooksListVisible = ko.observable(true);
    var isBookEditorVisible = ko.observable(false);
    var isAddButtonVisible = ko.observable(false);
    var isEditButtonVisible = ko.observable(false);

    var BooksModel = function (book) {
        this.book = ko.observableArray(book);

        if (this.book().length > 0) {
            var id = ko.observable(this.book()[0].Id);
            this.title = ko.observable(this.book()[0].Title).extend({  
                required: { message: 'Please supply your email address.' }
            })
            this.pages = ko.observable(this.book()[0].Pages);
            this.publisher = ko.observable(this.book()[0].Publisher);
            this.year = ko.observable(this.book()[0].Year);
            this.isbn = ko.observable(this.book()[0].ISBN);
            this.name = ko.observable("");
            this.url = ko.observable("");
            this.cover = ko.observableArray("");
            this.authors = ko.observableArray("");
            $.each(this.book()[0].Authors, (i, elem) => {
                this.authors.push({
                    name: ko.observable(elem.Name),
                    surname: ko.observable(elem.Surname)
                });
            })
        }
        else {
            this.title = ko.observable("");
            this.name = ko.observable("");
            this.surname = ko.observable("");
            this.pages = ko.observable("");
            this.publisher = ko.observable("");
            this.year = ko.observable("");
            this.isbn = ko.observable("");
            this.name = ko.observable("");
            this.url = ko.observable("");
            this.cover = ko.observableArray("");
            this.authors = ko.observableArray("");
        }

        this.addBook = function () {
            this.book = {
                Title: this.title(),
                Authors: this.authors(),
                Pages: this.pages(),
                Publisher: this.publisher(),
                Year: this.year(),
                ISBN: this.isbn(),
                Cover: this.cover()
            };
            $.ajax({
                type: 'POST',
                url: '/Books/AddBook',
                data: JSON.stringify(this.book),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (books) {
                    ko.cleanNode(document.getElementById("booksList"));
                    GetBooks();
                    isBooksListVisible(true);
                    isBookEditorVisible(false);
                },
                error: function () {
                    alert('error');
                }
            });
        }.bind(this);

        this.changeBook = function () {
            var authors = [];

            $.each(this.authors(), (i, elem) => {
                authors.push({
                    name: ko.isObservable(elem.name) ? elem.name() : elem.name,
                    surname: ko.isObservable(elem.surname) ? elem.surname() : elem.surname
                });
            })

            this.book = {
                Id: id(),
                Title: this.title(),
                Authors: authors,
                Pages: this.pages(),
                Publisher: this.publisher(),
                Year: this.year(),
                ISBN: this.isbn(),
                Cover: this.cover()
            };

            $.ajax({
                type: 'POST',
                url: '/Books/ChangeBook',
                data: JSON.stringify(this.book),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (books) {
                    ko.cleanNode(document.getElementById("booksList"));
                    GetBooks();
                    isBooksListVisible(true);
                    isBookEditorVisible(false);
                },
                error: function () {
                    alert('error');
                }
            });
        }.bind(this);

        if (this.authors().length == 0) {
            this.authors.push({
                name: "",
                surname: ""
            });
        }

        this.addAuthor = function () {
            this.authors.push({
                name: "",
                surname: ""
            });
        };

        this.back = function () {
            ko.cleanNode(document.getElementById("newBook"));
            ko.cleanNode(document.getElementById("booksList"));
            ko.applyBindings(new BooksModel(), document.getElementById("newBook"));
            GetBooks();
            isBooksListVisible(true);
            isBookEditorVisible(false);
        };

        this.removeAuthor = function (author) {
            var authors = [];
            this.authors.remove(author);

            $.each(this.authors(), (i, elem) => {
                authors.push({
                    name: elem.name(),
                    surname: elem.surname()
                });
            })

            if (temp.length > 0)
                this.book()[0].Authors = temp;
        }.bind(this);
    };

    ko.applyBindings(new BooksModel(), document.getElementById("newBook"));
    GetBooks();

    function GetBooks() {
        $.ajax({
            type: 'GET',
            url: '/Books/GetBooks',
            success: function (books) {
                var booksList = [];
                $.each(books, (i, book) => {
                    booksList.push(book);
                })
                ko.applyBindings(new BookGridModel(booksList), document.getElementById("booksList"));
            },
            error: function () {
                alert('error');
            }
        });
    }

    var BookGridModel = function (books) {
        this.books = ko.observableArray(books);

        this.sortByTitle = function () {
            this.books.sort(function (a, b) {
                var sortValue = a.title < b.title ? -1 : 1;
                localStorage.setItem("sorting", sortValue);
                return sortValue;
            });
        };

        this.sortByYear = function () {
            this.books.sort(function (a, b) {
                var sortValue = a.year < b.year ? -1 : 1;
                localStorage.setItem("sorting", sortValue);
                return sortValue;
            });
        };

        var sortValue = localStorage.getItem("sorting");
        this.books.sort(function () {
            return sortValue;
        });

        this.editBook = function () {
            ko.cleanNode(document.getElementById("newBook"));
            ko.applyBindings(new BooksModel(), document.getElementById("newBook"));
            isBooksListVisible(false);
            isBookEditorVisible(true);
            isEditButtonVisible(false);
            isAddButtonVisible(true);
        };

        this.booksGrid = new ko.simpleGrid.viewModel({
            data: this.books,
            columns: [
                { headerText: "№", rowText: "Id" },
                { headerText: "Title", rowText: "Title" },
                {
                    headerText: "Authors", rowText: function (item) {
                        var authors = [];
                        $.each(item.Authors, (i, author) => {
                            authors.push(' ' + author.Name + ' ' + author.Surname);
                        })
                        return authors;
                    }
                },
                { headerText: "Pages", rowText: "Pages" },
                { headerText: "Publisher", rowText: "Publisher" },
                { headerText: "Year", rowText: "Year" },
                { headerText: "ISBN", rowText: "ISBN" },
                { headerText: "Cover", rowText: "Cover" },
                {
                    headerText: "Actions", rowText:
                        {
                            edit: function (item) {
                                isAddButtonVisible(false);
                                isEditButtonVisible(true);
                                return function () {
                                    $.ajax({
                                        type: 'POST',
                                        url: '/Books/EditBook',
                                        data: {
                                            id: item.Id
                                        },
                                        success: function (book) {
                                            var books = [];
                                            books.push(book);
                                            isBooksListVisible(false);
                                            isBookEditorVisible(true);
                                            ko.cleanNode(document.getElementById("newBook"));
                                            ko.applyBindings(new BooksModel(books), document.getElementById("newBook"));
                                            isBooksListVisible(false);
                                            isBookEditorVisible(true);
                                        },
                                        error: function () {
                                            alert('error');
                                        }
                                    });
                                }
                            },
                            deletion: function (item) {
                                return function () {
                                    $.ajax({
                                        type: 'POST',
                                        url: '/Books/DeleteBook',
                                        data: {
                                            id: item.Id
                                        },
                                        success: function (books) {
                                            ko.cleanNode(document.getElementById("booksList"));
                                            GetBooks();
                                        },
                                        error: function () {
                                            alert('error');
                                        }
                                    });
                                }
                            }
                        }
                },
            ],
            pageSize: 10
        });
    };
</script>